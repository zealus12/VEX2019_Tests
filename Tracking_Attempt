#include "main.h"
#include <iostream>
using namespace pros;
#define PORT_TOPL 1
#define PORT_BOTTOML 2
#define PORT_TOPR 3
#define PORT_BOTTOMR 4
#define PORT_TOPB 5
#define PORT_BOTTOMB 6



/**
 * Runs the operator control code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the operator
 * control mode.
 *
 * If no competition control is connected, this function will run immediately
 * following initialize().
 *
 * If the robot is disabled or communications is lost, the
 * operator control task will be stopped. Re-enabling the robot will restart the
 * task, not resume it from where it left off.
 */
void opcontrol() {

	int xcoord = 0; int ycoord = 0;
	int distance = 16;
	int angle;
	int radiusS;
	pros:: ADIEncoder leftencoder (PORT_TOPL, PORT_BOTTOML, false);
	pros:: ADIEncoder rightencoder (PORT_TOPR, PORT_BOTTOMR, false);
	//pros:: ADIEncoder backencoder (PORT_TOPB, PORT_BOTTOMB, false);
	leftencoder.reset(); rightencoder.reset(); //backencoder.reset();
	int lastleft = 0; int lastright = 0;	//int lastback = 0;
	while (true) {
		int newleft = leftencoder.get_value();
		int newright = rightencoder.get_value();
		//int newback = backencoder.get_value();
		int R_travel = newright - lastright;
		int L_travel = newleft - lastleft;
//calculating angle robot has moved
		if (R_travel != L_travel){
			if (R_travel > 0 & L_travel > 0){
				
				if (R_travel > L_travel){
					angle = (R_travel - L_travel) / distance;
					radiusS = L_travel / angle;
				}
				else if (L_travel > R_travel){
					
				}
			}

		}
		else {
			angle = 0;
		}
		if (angle != 0){

		}

	}











}
